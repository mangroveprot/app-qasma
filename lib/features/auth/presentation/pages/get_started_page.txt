import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';

import '../../../../common/helpers/spacing.dart';
import '../../../../common/utils/constant.dart';
import '../../../../common/utils/form_field_config.dart';
import '../../../../common/widgets/bloc/button/button_cubit.dart';
import '../../../../common/widgets/bloc/form/form_cubit.dart';
import '../../../../common/widgets/button/custom_app_button.dart';
import '../../../../common/widgets/custom_app_bar.dart';
import '../../../../common/widgets/custom_dropdown_field.dart';
import '../../../../common/widgets/custom_form_field.dart';
import '../../../../infrastructure/injection/service_locator.dart';
import '../../../../theme/theme_extensions.dart';
import '../../../users/domain/usecases/is_register_usecase.dart';
import '../widgets/call_to_action.dart';
import '../widgets/custom_password_field.dart';
import '../widgets/signup_header.dart';
import 'test_page.dart';

class GetStartedPage extends StatefulWidget {
  GetStartedPage({super.key});

  @override
  State<GetStartedPage> createState() => _GetStartedPageState();
}

class _GetStartedPageState extends State<GetStartedPage> {
  final _idNumberController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  final _courseController = ValueNotifier<String?>(null);
  final _blockController = ValueNotifier<String?>(null);
  final _yearLevelController = ValueNotifier<String?>(null);

  @override
  void dispose() {
    _idNumberController.dispose();
    _courseController.dispose();
    _blockController.dispose();
    _yearLevelController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final formCubit = context.read<FormCubit>();

    return Scaffold(
      appBar: const CustomAppBar(leadingText: 'Back'),
      body: BlocListener<ButtonCubit, ButtonState>(
        listener: (context, state) {
          if (state is ButtonSuccessState) {
            context.push(
              '/auth/create-account',
              extra: {
                'idNumber': _idNumberController.text,
                'password': _passwordController.text,
                'course': _courseController.value,
                'block': _blockController.value,
                'yearLevel': _yearLevelController.value,
              },
            );
          }
          if (state is ButtonFailureState) {
            formCubit.setFieldError(
              field_idNumber.field_key,
              state.errorMessage,
            );
          }
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SignupHeader(headingTitle: 'Get Started!'),
                Spacing.verticalLarge,
                CustomFormField(
                  field_key: field_idNumber.field_key,
                  name: field_idNumber.name,
                  required: true,
                  hint: field_idNumber.name,
                  controller: _idNumberController,
                ),
                const SizedBox(height: 16),
                CustomDropdownField(
                  field_key: field_course.field_key,
                  name: field_course.name,
                  hint: field_course.hint,
                  required: true,
                  controller: _courseController,
                  items: courseList,
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    CustomDropdownField(
                      field_key: field_block.field_key,
                      name: field_block.name,
                      hint: field_block.hint,
                      required: true,
                      showErrorText: false,
                      controller: _blockController,
                      items: blockList,
                    ),
                    const SizedBox(width: 12),
                    CustomDropdownField(
                      field_key: field_year_level.field_key,
                      name: field_year_level.name,
                      hint: field_year_level.hint,
                      controller: _yearLevelController,
                      required: true,
                      showErrorText: false,
                      items: yearLevelList,
                    ),
                    const SizedBox(width: 12),
                  ],
                ),
                const SizedBox(height: 16),
                CustomPasswordField(
                  field_key: field_password.field_key,
                  name: field_password.name,
                  hint: field_password.hint,
                  controller: _passwordController,
                ),
                const SizedBox(height: 16),
                CustomPasswordField(
                  field_key: field_confirm_password.field_key,
                  name: field_confirm_password.name,
                  hint: field_confirm_password.hint,
                  controller: _confirmPasswordController,
                  showPasswordRule: false,
                ),
                const SizedBox(height: 16),
                CustomAppButton(
                  buttonText: 'Next',
                  textDecoration: TextDecoration.underline,
                  fontWeight: context.weight.medium,
                  iconData: Icons.arrow_forward,
                  iconPosition: Position.right,
                  mainAxisAlignment: MainAxisAlignment.end,
                  onPressed: () {
                    final isValid = formCubit.validateAll({
                      field_idNumber.field_key: _idNumberController.text,
                      field_password.field_key: _passwordController.text,
                      field_confirm_password.field_key:
                          _confirmPasswordController.text,
                      field_course.field_key: _courseController.value ?? '',
                      field_block.field_key: _blockController.value ?? '',
                    });

                    if (!isValid) return;

                    if (_passwordController.text !=
                        _confirmPasswordController.text) {
                      formCubit.setFieldError(
                        field_confirm_password.field_key,
                        'Confirm password must be the same with password',
                      );
                      return;
                    }
                    final bool isPasswordValid =
                        CustomPasswordFieldValidation.isValid(
                          _passwordController,
                        );

                    if (!isPasswordValid) {
                      return;
                    }

                    context.read<ButtonCubit>().execute(
                      usecase: sl<IsRegisterUsecase>(),
                      params: _idNumberController.text,
                    );
                  },
                ),
                const SizedBox(height: 16),
                const CallToAction(
                  actionText: 'Already have an acount? ',
                  actionLabel: 'Login',
                  directionPath: '/auth/create-account',
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  child: const Text('Go to Second Page'),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const TestPage()),
                    );
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
